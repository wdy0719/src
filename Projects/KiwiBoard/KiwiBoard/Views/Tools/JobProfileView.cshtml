
@{
    
    //[Route("JobProfile/{apCluster}/{environment}/{runtime}/{dereferencedRuntime}/{jobId}")]
    ViewBag.jobId = ViewContext.RouteData.Values["jobId"];
    ViewBag.dereferencedRuntime = ViewContext.RouteData.Values["dereferencedRuntime"];
    ViewBag.environment = ViewContext.RouteData.Values["environment"];
    ViewBag.apCluster = ViewContext.RouteData.Values["apCluster"];
    ViewBag.runtime = ViewContext.RouteData.Values["runtime"];
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.Title = "Job Profile - " + ViewBag.jobId;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">Job Profile<small><i id="info">&nbsp;&nbsp; - Job Id: @ViewBag.JobId</i></small></h3>
    </div>
    <div class="panel-body">

        <div class="row" style="padding:5px 15px 5px 15px;">
                <div id="profileLog" class="well wordwrap small" style="min-height:300px;">Loading...</div>
        </div>
    </div>
</div>



<style>
    .wordwrap {
        white-space: pre-wrap; /* css-3 */
        white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
    }

</style>

@section style
{
    <link href="@Url.Content("~/Content/highlight/styles/github.css")" rel="stylesheet" type="text/css" />
}

@section Scripts
{
<script src="@Url.Content("~/Content/highlight/highlight.pack.js")"></script>
<script>hljs.initHighlightingOnLoad();</script>

    <script>
        $(document).ready(function () {
            loadProfile();
        });

        function loadProfile() {
            var url = "/api/phxutils/GetProfile/@ViewBag.apCluster/@ViewBag.environment/@ViewBag.runtime/@ViewBag.dereferencedRuntime/@ViewBag.jobId";

            ajaxindicatorstart();
            $.getJSON(url, function () { })
                .done(function (data) {
                    if (data.Machine != "") {
                        // set machine info
                        $('#info').text($('#info').text() + ";      Machine: " + data.Machine);

                        // set profile
                        // var formattedProfile = FormatProfileString(data.Profile);
                       // $('#profileLog').text(formattedProfile);
                        DisplayProfileString(data.Profile);
                      //  FormatProfileString(data.Profile);

                    } else {
                        $('#profileLog').html("Not Found.");
                    }
                })
                .error(function (err) {
                    $('#profileLog').html("Error: " + err.responseText);
                })
                .always(function () {
                    ajaxindicatorstop();
                });
        }

        function parseProfileString(profileStr) {
            var profile = [];
            $.each(profileStr.split("\n"), function (i, line) {
                if (line == "") return;
                var title = line.substring(0, line.indexOf(","));
                var tmp = line.substring(title.length + 1)
                var time = tmp.substring(0, tmp.indexOf(","));
                var content = tmp.substring(tmp.indexOf(",") + 1);

                profile.push({ Title: title, Time: time, Content: content });
            });

            return profile;
        }

        function DisplayProfileString(profileStr) {
            var profileDiv = $('#profileLog');
            profileDiv.html('');
       
            $.each(profileStr.split("\n"), function (i, line) {
                if (line == "") return;
                var title = line.substring(0, line.indexOf(","));

                profileDiv.append($('<strong>' + title + '</strong>'));

                var content = line.substring(title.length + 1);
                if (content.match(/(>)(<)(\/*)/g)) {
                    content = content.replace('<', '\r\n<');
                    content = content.replace(/\<br\/\>/g, '').replace(/\\"/g, '').replace(/\r/g, '').replace(/\t/g, '');
                    content = formatXml(content);
                   // content = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/ /g, '&nbsp;');
                }

                var code = $('<pre><code class="lang-xml"></code></pre>');
                code.children('code').text(content);
                profileDiv.append(code);
            });

            $('pre code').each(function (i, block) {
                hljs.highlightBlock(block);
            });

        }
        function FormatProfileString(profileStr) {

            var formatted = "";
            $.each(profileStr.split("\n"), function (i, line) {
                if (line == "") return;
                var title = line.substring(0, line.indexOf(","));

                var content = line.substring(title.length);
                if (content.match(/(>)(<)(\/*)/g)) {
                    content = content.replace('<', '\r\n<');
                    content = content.replace(/\<br\/\>/g, '').replace(/\\"/g, '').replace(/\r/g, '').replace(/\t/g, '');
                    content = formatXml(content);
                    content = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/ /g, '&nbsp;');
                }

                formatted += '<strong>' + title + '</strong>' + content + '<hr style="margin-top:0" />';

            });
            
            $('#profileLog').html(formatted);
        }

        function formatXml(xml) {

            var formatted = '';
            var reg = /(>)(<)(\/*)/g;
            xml = xml.replace(reg, '$1\r\n$2$3');
            var pad = 0;

            jQuery.each(xml.split('\r\n'), function (index, node) {
                var indent = 0;
                if (node.match(/.+<\/\w[^>]*>$/)) {
                    indent = 0;
                }
                else if (node.match(/^<\/\w/)) {
                    if (pad != 0) {
                        pad -= 1;
                    }
                }
                else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
                    indent = 1;
                }
                else {
                    indent = 0;
                }
                var padding = '';
                for (var i = 0; i < pad; i++) {
                    padding += '  ';
                }
                formatted += padding + node + '\r\n';
                pad += indent;
            });

            return formatted;
        }

        function ajaxindicatorstart() {
            $('body').css('cursor', 'wait');
            $("input").prop('disabled', true);
            $("button").prop('disabled', true);
        }

        function ajaxindicatorstop() {
            $("input").prop('disabled', false);
            $("button").prop('disabled', false);
            $('body').css('cursor', 'auto');
        }
    </script>
}