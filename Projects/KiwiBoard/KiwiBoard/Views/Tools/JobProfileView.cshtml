@{

    //[Route("JobProfile/{apCluster}/{environment}/{runtime}/{dereferencedRuntime}/{jobId}")]
    ViewBag.jobId = ViewContext.RouteData.Values["jobId"];
    ViewBag.dereferencedRuntime = ViewContext.RouteData.Values["dereferencedRuntime"];
    ViewBag.environment = ViewContext.RouteData.Values["environment"];
    ViewBag.apCluster = ViewContext.RouteData.Values["apCluster"];
    ViewBag.runtime = ViewContext.RouteData.Values["runtime"];
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.Title = "Job Profile - " + ViewBag.jobId;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">Job Profile<small><i id="info">&nbsp;&nbsp; - Job Id: @ViewBag.JobId</i></small></h3>
    </div>
    <div class="panel-body">
        <div class="row" style="padding:5px 15px 5px 15px;">
           
            <div id="toolbar">
                <h4 style="margin-bottom:0px">Job Processes</h4>
           
            </div>
            <table id="table_Profile" class="bootstrap-table small"
                   data-toggle="table"
                   data-search="true"
                   data-card-view="false" data-show-columns="true"
                   data-toolbar="#toolbar">
                <thead>
                    <tr class="active">
                        @*<th data-field="Vertices" data-sortable="false" data-formatter="caretsFormatter" data-events="caretsDataEvents"></th>*@
                        <th data-field="StageName" data-sortable="false">Stage</th>
                        <th data-field="VertexName" data-sortable="false">Vertex</th>
                        <th data-field="Machine" data-sortable="false">Machine</th>
                        @*<th data-field="RuntimeStats" data-sortable="false" data-visible="false">RuntimeStats</th>*@
                        <th data-field="Name" data-sortable="false">Process Name</th>
                        <th data-field="Guid" data-sortable="false">Process Guid</th>
                        <th data-field="ProcessStartTime" data-sortable="false">Process StartTime</th>
                        <th data-field="ProcessCompleteTime" data-sortable="false">Process CompleteTime</th>
                        <th data-field="ExitStatus" data-sortable="false">ExitStatus</th>
                        <th data-field="IsCriticalPath" data-sortable="false">IsCriticalPath</th>
                        <th data-field="TotalDataRead" data-sortable="false">TotalDataRead</th>
                        <th data-field="TotalDataWritten" data-sortable="false">TotalDataWritten</th>
                    </tr>
                </thead>
            </table>
            @*<span><small>&nbsp;&nbsp;*- Red lines are critical path.</small></span>*@
            <table class="small">
                <tr>
                    <td><strong style="padding-right:30px;">*-  Enable highlights: </strong>@*<input type="checkbox" id="hlCriticalPath" checked><span class="text-warning" style="padding-right:30px;">Critical path</span>*@</td>
                    <td><input type="checkbox" id="hlUpVertex" checked><span class="text-success" style="padding-right:30px;">Up Vertices</span></td>
                    <td><input type="checkbox" id="hlDownVertex" checked><span class="text-info" style="padding-right:30px;">Down Vertices</span></td>
                </tr>
            </table>
        </div>

        <div class="row" style="padding:5px 15px 5px 15px;">
            <h4 style="margin-bottom:0px">RuntimeStats</h4>
            <pre>
            <code id="runtimeState" class="lang-xml"></code>
            </pre>
        </div>

        <div class="row" style="padding:5px 15px 5px 15px;">
            <h4 style="margin-bottom:0px">Algebra</h4>
            <pre>
            <code id="algebraCode" class="lang-xml"></code>
            </pre>
        </div>
    </div>
</div>



<style>
    .wordwrap {
        white-space: pre-wrap; /* css-3 */
        white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
        white-space: -pre-wrap; /* Opera 4-6 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* Internet Explorer 5.5+ */
    }
</style>

@section style
{
    <link href="@Url.Content("~/Content/highlight/styles/github.css")" rel="stylesheet" type="text/css" />
}

@section Scripts
{
    <script src="@Url.Content("~/Content/highlight/highlight.pack.js")"></script>
    @*<script>hljs.initHighlightingOnLoad();</script>*@

    <script>
    var preSelected = null;
    $(document).ready(function () {

        loadProfileObj();

        registryOnClickRowEvent();
    });

    function loadProfileObj(url) {
        var url = "/api/phxutils/GetProfileProcesses/@ViewBag.apCluster/@ViewBag.environment/@ViewBag.runtime/@ViewBag.dereferencedRuntime/@ViewBag.jobId";
        var profileTable = $('#table_Profile');

        ajaxindicatorstart();
        profileTable.bootstrapTable('showLoading');
        $.getJSON(url, function () { })
            .done(function (data) {
                if (data==null || data.ProfileLocation == "")
                    return;

                // set machine info
                $('#info').text($('#info').text() + ";      Profile on machine: " + data.ProfileLocation);
                $('<a href="/tools/JobProfile/@ViewBag.jobId/download" class="glyphicon glyphicon-download-alt" style="float:right" title="Download original profile.">Profile</a>').appendTo($('#info'));

                // show algebra
                if (data.Algebra != null) {
                    $('#algebraCode').text(data.Algebra.replace(/\<br\/\>/g, '\n').replace(/\r/g, '').replace(/\t/g, '  '));
                    highlightBlock();
                }

                // load data to table
                profileTable.bootstrapTable('load', data.Processes);
                var rows = $('#table_Profile tbody tr')
                var cols = rows.first().children().length;

                // hightlight critical path
                //$.each(rows, function (index, row) {
                //    if ($.inArray(data.Processes[index].Guid, data.CriticalPath) > -1) {
                //        rows[index].className = 'warning';
                //    }
                //});

                //

            })
            .error(function (err) {
                alert('Load data error: (' + err.status + ") " + err.statusText + '\nsss' + err.responseText);
            })
            .always(function () {
                ajaxindicatorstop();
                profileTable.bootstrapTable('hideLoading');
            });
    }

    function registryOnClickRowEvent() {
        $('#table_Profile').on('click-row.bs.table', function (e, name, args) {

            ajaxindicatorstart();

            try {
                if (preSelected != null) {
                    preSelected.removeClass('active');
                }
                preSelected = args.first();
                preSelected.addClass('active');

                // show runtimestats
                if (name.RuntimeStats !== null) {
                    $('#runtimeState').text(name.RuntimeStats.replace(/\<br\/\>/g, '\n').replace(/\r/g, '').replace(/\t/g, '  '));
                    highlightBlock();
                }

                $('#table_Profile tbody tr.success').removeClass('success');
                $('#table_Profile tbody tr.info').removeClass('info');
                var rows = $('#table_Profile tbody tr');
                var upVertices = name.UpVertices;
                var downVertices = name.DownVertices;
                var hlUpVertexEnabled = $('#hlUpVertex').prop('checked');
                var hlDownVertexEnabled = $('#hlDownVertex').prop('checked');
                $.each(rows, function (index, row) {

                    // hightlight up vertices
                    if (hlUpVertexEnabled && upVertices.length != 0 && $.inArray(row.cells[1].innerText, upVertices) > -1) {
                        rows[index].className = 'success ' + rows[index].className;
                        return;
                    }

                    // hightlight down vertices
                    if (hlDownVertexEnabled && downVertices.length != 0 && $.inArray(row.cells[1].innerText, downVertices) > -1) {
                        rows[index].className = 'info ' + rows[index].className;;
                        return
                    }
                });
            }
            finally {
                ajaxindicatorstop();
            }
        });
    }

    function highlightBlock() {
        $('pre code').each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

    function ajaxindicatorstart() {
        $('body').css('cursor', 'wait');
        $("input").prop('disabled', true);
        $("button").prop('disabled', true);
    }

    function ajaxindicatorstop() {
        $("input").prop('disabled', false);
        $("button").prop('disabled', false);
        $('body').css('cursor', 'auto');
    }
    </script>

   }